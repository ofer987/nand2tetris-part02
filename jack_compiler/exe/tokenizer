#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pry-byebug'

require_relative '../lib/jack_compiler'

IF_REGEX = /(if)\s*(\(.+)/
EXPRESSION_REGEX = /\(\s*(\S+)\s*(\S+)\s*(\S+)(.*)/
LET_REGEX = /let\s+([A-Za-z\-_]+)\s*(=)\s*"(.+)"\s*(;)(.*)/

path = ARGV[0].to_s

statements = File.readlines(path)
  .map(&:chomp)
  .map(&:strip)
  .join

# require 'pry-byebug'
# binding.pry

puts statements

document_string = <<~XML
  <tokenizer>

  </tokenizer>
XML

# document = Nokogiri::XML(document_string)
document = Nokogiri::XML::Document.new
# parent = document.at_xpath('//tokenizer')

# binding.pry
tokenizer = document.create_element('tokenizer')

# id = '<'
# keyword = document.create_element('keyword', '5')
# tokenizer << keyword
#
# document << tokenizer
# document.xpath('//tokenizer')
# keyword = Nokogiri::XML::Text.new('keyword', parent)
# keyword.content = '5'
# binding.pry
# parent.add_child("<keyword>#{id}</keyword>")

# puts document.to_xml

# builder = Nokogiri::XML::Builder.new do |xml|
#   xml.root {
#     xml.keyword 'if'
#   }
# end
#
def match_token(document, element, statements)
  binding.pry

  until statements.blank?
    statements = statements.to_s.strip

    if statements.match? IF_REGEX
      result = statements.match(IF_REGEX)
      keyword = document.create_element('keyword', result[1])

      element << keyword

      statements = result[-1]
    elsif statements.match? EXPRESSION_REGEX
      result = statements.match(EXPRESSION_REGEX)

      symbol = document.create_element('symbol', '(')
      element << symbol

      identifier = document.create_element('identifier', result[1])
      element << identifier

      symbol = document.create_element('symbol', result[2])
      element << symbol

      integer_constant = document.create_element('integerConstant', result[3])
      element << integer_constant

      symbol = document.create_element('symbol', ')')
      element << symbol

      binding.pry
      statements = result[-1]
    elsif statements.match? LET_REGEX
      result = statements.match(LET_REGEX)

      symbol = document.create_element('symbol', '{')
      element << symbol

      keyword = document.create_element('keyword', 'let')
      element << keyword

      identifier = document.create_element('identifier', result[1])
      element << identifier

      symbol = document.create_element('symbol', result[2])
      element << symbol

      string_constant = document.create_element('stringConstant', result[3])
      element << string_constant

      symbol = document.create_element('symbol', result[4])
      element << symbol

      symbol = document.create_element('symbol', '}')
      element << symbol

      statements = result[-1]
      break
    end
  end
end

match_token(document, tokenizer, statements)

document << tokenizer

puts document.to_xml
