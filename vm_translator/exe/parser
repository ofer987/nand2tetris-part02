#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/vm_translator'

CONSTANT_REGEX = /constant (\d+)/
PUSH_REGEX = /^push (.+)$/
ADD_REGEX = /^add$/
SUB_REGEX = /^sub$/
EQ_REGEX = /^eq$/
LT_REGEX = /^lt$/
GT_REGEX = /^gt$/
NEG_REGEX = /^neg$/
AND_REGEX = /^and$/
OR_REGEX = /^or$/
NOT_REGEX = /^not$/

STACK = VMTranslator::Stack.new
CONSTANT_RAM = VMTranslator::Constant.new

path = ARGV[0].to_s

def put_start_program
  output = <<~START_PROGRAM
    (START)
    @#{VMTranslator::RAM::STACK_RAM_INDEX}
    D=A

    @#{VMTranslator::RAM::STACK_ADDRESS_LOCATION}
    M=D
  START_PROGRAM

  puts output.chomp
end

def put_end_program
  output = <<~END_PROGRAM
    (END)

    @END
    0;JMP
  END_PROGRAM

  puts output.chomp
end

def parse(line)
  if line.match? PUSH_REGEX
    inner_match = line.match(PUSH_REGEX)[1].to_s

    ram, value = parse(inner_match)
    ram.pop(value)
    STACK.push(value)
  elsif line.match? CONSTANT_REGEX
    value = line.match(CONSTANT_REGEX)[1].to_i

    [CONSTANT_RAM, value]
    # STACK.constant(result)
  elsif line.match? ADD_REGEX
    STACK.add
  elsif line.match? SUB_REGEX
    STACK.sub
  elsif line.match? EQ_REGEX
    STACK.eq
  elsif line.match? LT_REGEX
    STACK.lt
  elsif line.match? GT_REGEX
    STACK.gt
  elsif line.match? NEG_REGEX
    STACK.neg
  elsif line.match? AND_REGEX
    STACK.and
  elsif line.match? OR_REGEX
    STACK.or
  elsif line.match? NOT_REGEX
    STACK.not
  end
end

begin
  put_start_program

  File.readlines(path)
    .map(&:chomp)
    .each { |line| parse(line) }

  put_end_program
rescue StandardError => e
  puts "Error converting VM to ASM: #{e}"
  puts e.backtrace

  exit 1
end

exit 0
